'use strict';
var __importDefault =
    (this && this.__importDefault) ||
    function (mod) {
        return mod && mod.__esModule ? mod : { default: mod };
    };
Object.defineProperty(exports, '__esModule', { value: true });
const Discord = require('discord.js'); // Load discord.js
const { Player } = require('discord-player'); // Load discord-player
const { promisify } = require('util');
const readdir = promisify(require('fs').readdir);
const Enmap = require('enmap'); // Load enmap
const config_1 = __importDefault(require('./config'));
const client = new Discord.Client({
    ws: {
        intents: config_1.default.intents,
    },
});
client.player = new Player(client); // Load player to client
client.config = config_1.default; // Load config to client
client.logger = require('./modules/Logger'); // Load logger to client
require('./modules/functions.js')(client); // Handy functions
client.commands = new Enmap(); // Create enmap collections
client.aliases = new Enmap();
client.settings = new Enmap({ name: 'settings' });
const init = async () => {
    // Load commands
    const cmdFiles = await readdir('./commands/');
    client.logger.log(`Loading a total of ${cmdFiles.length} commands.`);
    cmdFiles.forEach((f) => {
        if (!f.endsWith('.ts')) return;
        const response = client.loadCommand(f);
        if (response) console.log(response);
    });
    // Load events
    const evtFiles = await readdir('./events/');
    client.logger.log(`Loading ${evtFiles.length} discord events.`);
    evtFiles.forEach((file) => {
        const eventName = file.split('.')[0];
        client.logger.log(`Loading Event: ${eventName}`);
        const event = require(`./events/${file}`);
        client.on(eventName, event.bind(null, client));
    });
    // Load player events
    const playerEvtFiles = await readdir('./playerEvents/');
    client.logger.log(`Loading ${playerEvtFiles.length} player events.`);
    playerEvtFiles.forEach((file) => {
        const eventName = file.split('.')[0];
        client.logger.log(`Loading Event: ${eventName}`);
        const event = require(`./playerEvents/${file}`);
        client.player.on(eventName, event.bind(null, client));
    });
    // Generate a cache of client permissions for pretty perm names in commands.
    client.levelCache = {};
    for (let i = 0; i < client.config.permLevels.length; i++) {
        const thisLevel = client.config.permLevels[i];
        client.levelCache[thisLevel.name] = thisLevel.level;
    }
    // Login to API
    client.login(client.config.token);
};
init();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm90LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2JvdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLGtCQUFrQjtBQUN6RCxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxzQkFBc0I7QUFDcEUsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN0QyxNQUFNLE9BQU8sR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2pELE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLGFBQWE7QUFDN0Msc0RBQThCO0FBQzlCLE1BQU0sTUFBTSxHQUFHLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQztJQUM5QixFQUFFLEVBQUU7UUFDQSxPQUFPLEVBQUUsZ0JBQU0sQ0FBQyxPQUFPO0tBQzFCO0NBQ0osQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLHdCQUF3QjtBQUM1RCxNQUFNLENBQUMsTUFBTSxHQUFHLGdCQUFNLENBQUMsQ0FBQyx3QkFBd0I7QUFDaEQsTUFBTSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLHdCQUF3QjtBQUVyRSxPQUFPLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLGtCQUFrQjtBQUU3RCxNQUFNLENBQUMsUUFBUSxHQUFHLElBQUksS0FBSyxFQUFFLENBQUMsQ0FBQywyQkFBMkI7QUFDMUQsTUFBTSxDQUFDLE9BQU8sR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDO0FBQzdCLE1BQU0sQ0FBQyxR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Q3RDLENBQUMsQ0FBQztBQUVGLElBQUksRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgRGlzY29yZCA9IHJlcXVpcmUoJ2Rpc2NvcmQuanMnKTsgLy8gTG9hZCBkaXNjb3JkLmpzXG5jb25zdCB7IFBsYXllciB9ID0gcmVxdWlyZSgnZGlzY29yZC1wbGF5ZXInKTsgLy8gTG9hZCBkaXNjb3JkLXBsYXllclxuY29uc3QgeyBwcm9taXNpZnkgfSA9IHJlcXVpcmUoJ3V0aWwnKTtcbmNvbnN0IHJlYWRkaXIgPSBwcm9taXNpZnkocmVxdWlyZSgnZnMnKS5yZWFkZGlyKTtcbmNvbnN0IEVubWFwID0gcmVxdWlyZSgnZW5tYXAnKTsgLy8gTG9hZCBlbm1hcFxuaW1wb3J0IGNvbmZpZyBmcm9tICcuL2NvbmZpZyc7XG5jb25zdCBjbGllbnQgPSBuZXcgRGlzY29yZC5DbGllbnQoe1xuICAgIHdzOiB7XG4gICAgICAgIGludGVudHM6IGNvbmZpZy5pbnRlbnRzLFxuICAgIH0sXG59KTtcblxuY2xpZW50LnBsYXllciA9IG5ldyBQbGF5ZXIoY2xpZW50KTsgLy8gTG9hZCBwbGF5ZXIgdG8gY2xpZW50XG5jbGllbnQuY29uZmlnID0gY29uZmlnOyAvLyBMb2FkIGNvbmZpZyB0byBjbGllbnRcbmNsaWVudC5sb2dnZXIgPSByZXF1aXJlKCcuL21vZHVsZXMvTG9nZ2VyJyk7IC8vIExvYWQgbG9nZ2VyIHRvIGNsaWVudFxuXG5yZXF1aXJlKCcuL21vZHVsZXMvZnVuY3Rpb25zLmpzJykoY2xpZW50KTsgLy8gSGFuZHkgZnVuY3Rpb25zXG5cbmNsaWVudC5jb21tYW5kcyA9IG5ldyBFbm1hcCgpOyAvLyBDcmVhdGUgZW5tYXAgY29sbGVjdGlvbnNcbmNsaWVudC5hbGlhc2VzID0gbmV3IEVubWFwKCk7XG5jbGllbnQuc2V0dGluZ3MgPSBuZXcgRW5tYXAoeyBuYW1lOiAnc2V0dGluZ3MnIH0pO1xuXG5jb25zdCBpbml0ID0gYXN5bmMgKCkgPT4ge1xuICAgIC8vIExvYWQgY29tbWFuZHNcbiAgICBjb25zdCBjbWRGaWxlcyA9IGF3YWl0IHJlYWRkaXIoJy4vY29tbWFuZHMvJyk7XG4gICAgY2xpZW50LmxvZ2dlci5sb2coYExvYWRpbmcgYSB0b3RhbCBvZiAke2NtZEZpbGVzLmxlbmd0aH0gY29tbWFuZHMuYCk7XG4gICAgY21kRmlsZXMuZm9yRWFjaCgoZikgPT4ge1xuICAgICAgICBpZiAoIWYuZW5kc1dpdGgoJy5qcycpKSByZXR1cm47XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gY2xpZW50LmxvYWRDb21tYW5kKGYpO1xuICAgICAgICBpZiAocmVzcG9uc2UpIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcbiAgICB9KTtcblxuICAgIC8vIExvYWQgZXZlbnRzXG4gICAgY29uc3QgZXZ0RmlsZXMgPSBhd2FpdCByZWFkZGlyKCcuL2V2ZW50cy8nKTtcbiAgICBjbGllbnQubG9nZ2VyLmxvZyhgTG9hZGluZyAke2V2dEZpbGVzLmxlbmd0aH0gZGlzY29yZCBldmVudHMuYCk7XG4gICAgZXZ0RmlsZXMuZm9yRWFjaCgoZmlsZSkgPT4ge1xuICAgICAgICBjb25zdCBldmVudE5hbWUgPSBmaWxlLnNwbGl0KCcuJylbMF07XG4gICAgICAgIGNsaWVudC5sb2dnZXIubG9nKGBMb2FkaW5nIEV2ZW50OiAke2V2ZW50TmFtZX1gKTtcbiAgICAgICAgY29uc3QgZXZlbnQgPSByZXF1aXJlKGAuL2V2ZW50cy8ke2ZpbGV9YCk7XG4gICAgICAgIGNsaWVudC5vbihldmVudE5hbWUsIGV2ZW50LmJpbmQobnVsbCwgY2xpZW50KSk7XG4gICAgfSk7XG5cbiAgICAvLyBMb2FkIHBsYXllciBldmVudHNcbiAgICBjb25zdCBwbGF5ZXJFdnRGaWxlcyA9IGF3YWl0IHJlYWRkaXIoJy4vcGxheWVyRXZlbnRzLycpO1xuICAgIGNsaWVudC5sb2dnZXIubG9nKGBMb2FkaW5nICR7cGxheWVyRXZ0RmlsZXMubGVuZ3RofSBwbGF5ZXIgZXZlbnRzLmApO1xuICAgIHBsYXllckV2dEZpbGVzLmZvckVhY2goKGZpbGUpID0+IHtcbiAgICAgICAgY29uc3QgZXZlbnROYW1lID0gZmlsZS5zcGxpdCgnLicpWzBdO1xuICAgICAgICBjbGllbnQubG9nZ2VyLmxvZyhgTG9hZGluZyBFdmVudDogJHtldmVudE5hbWV9YCk7XG4gICAgICAgIGNvbnN0IGV2ZW50ID0gcmVxdWlyZShgLi9wbGF5ZXJFdmVudHMvJHtmaWxlfWApO1xuICAgICAgICBjbGllbnQucGxheWVyLm9uKGV2ZW50TmFtZSwgZXZlbnQuYmluZChudWxsLCBjbGllbnQpKTtcbiAgICB9KTtcblxuICAgIC8vIEdlbmVyYXRlIGEgY2FjaGUgb2YgY2xpZW50IHBlcm1pc3Npb25zIGZvciBwcmV0dHkgcGVybSBuYW1lcyBpbiBjb21tYW5kcy5cbiAgICBjbGllbnQubGV2ZWxDYWNoZSA9IHt9O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2xpZW50LmNvbmZpZy5wZXJtTGV2ZWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHRoaXNMZXZlbCA9IGNsaWVudC5jb25maWcucGVybUxldmVsc1tpXTtcbiAgICAgICAgY2xpZW50LmxldmVsQ2FjaGVbdGhpc0xldmVsLm5hbWVdID0gdGhpc0xldmVsLmxldmVsO1xuICAgIH1cblxuICAgIC8vIExvZ2luIHRvIEFQSVxuICAgIGNsaWVudC5sb2dpbihjbGllbnQuY29uZmlnLnRva2VuKTtcbn07XG5cbmluaXQoKTtcbiJdfQ==
