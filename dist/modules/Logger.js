/*
Logger class for easy and aesthetically pleasing console logging
*/
const chalk = require('chalk');
const moment = require('moment');
exports.log = (content, type = 'log') => {
    const timestamp = `[${moment().format('YYYY-MM-DD HH:mm:ss')}]:`;
    switch (type) {
        case 'log': {
            return console.log(`${timestamp} ${chalk.bgBlue(type.toUpperCase())} ${content} `);
        }
        case 'warn': {
            return console.log(`${timestamp} ${chalk.black.bgYellow(type.toUpperCase())} ${content} `);
        }
        case 'error': {
            return console.log(`${timestamp} ${chalk.bgRed(type.toUpperCase())} ${content} `);
        }
        case 'debug': {
            return console.log(`${timestamp} ${chalk.green(type.toUpperCase())} ${content} `);
        }
        case 'cmd': {
            return console.log(`${timestamp} ${chalk.black.bgWhite(type.toUpperCase())} ${content}`);
        }
        case 'ready': {
            return console.log(`${timestamp} ${chalk.black.bgGreen(type.toUpperCase())} ${content}`);
        }
        default:
            throw new TypeError('Logger type must be either warn, debug, log, ready, cmd or error.');
    }
};
exports.error = (...args) => this.log(...args, 'error');
exports.warn = (...args) => this.log(...args, 'warn');
exports.debug = (...args) => this.log(...args, 'debug');
exports.cmd = (...args) => this.log(...args, 'cmd');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vZHVsZXMvTG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztFQUVFO0FBQ0YsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQy9CLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUVqQyxPQUFPLENBQUMsR0FBRyxHQUFHLENBQUMsT0FBTyxFQUFFLElBQUksR0FBRyxLQUFLLEVBQUUsRUFBRTtJQUNwQyxNQUFNLFNBQVMsR0FBRyxJQUFJLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUM7SUFDakUsUUFBUSxJQUFJLEVBQUU7UUFDVixLQUFLLEtBQUssQ0FBQyxDQUFDO1lBQ1IsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUNkLEdBQUcsU0FBUyxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksT0FBTyxHQUFHLENBQ2pFLENBQUM7U0FDTDtRQUNELEtBQUssTUFBTSxDQUFDLENBQUM7WUFDVCxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQ2QsR0FBRyxTQUFTLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQ2hDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FDckIsSUFBSSxPQUFPLEdBQUcsQ0FDbEIsQ0FBQztTQUNMO1FBQ0QsS0FBSyxPQUFPLENBQUMsQ0FBQztZQUNWLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FDZCxHQUFHLFNBQVMsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLE9BQU8sR0FBRyxDQUNoRSxDQUFDO1NBQ0w7UUFDRCxLQUFLLE9BQU8sQ0FBQyxDQUFDO1lBQ1YsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUNkLEdBQUcsU0FBUyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksT0FBTyxHQUFHLENBQ2hFLENBQUM7U0FDTDtRQUNELEtBQUssS0FBSyxDQUFDLENBQUM7WUFDUixPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQ2QsR0FBRyxTQUFTLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQy9CLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FDckIsSUFBSSxPQUFPLEVBQUUsQ0FDakIsQ0FBQztTQUNMO1FBQ0QsS0FBSyxPQUFPLENBQUMsQ0FBQztZQUNWLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FDZCxHQUFHLFNBQVMsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FDL0IsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUNyQixJQUFJLE9BQU8sRUFBRSxDQUNqQixDQUFDO1NBQ0w7UUFDRDtZQUNJLE1BQU0sSUFBSSxTQUFTLENBQ2YsbUVBQW1FLENBQ3RFLENBQUM7S0FDVDtBQUNMLENBQUMsQ0FBQztBQUVGLE9BQU8sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxHQUFHLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztBQUV4RCxPQUFPLENBQUMsSUFBSSxHQUFHLENBQUMsR0FBRyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFFdEQsT0FBTyxDQUFDLEtBQUssR0FBRyxDQUFDLEdBQUcsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBRXhELE9BQU8sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Mb2dnZXIgY2xhc3MgZm9yIGVhc3kgYW5kIGFlc3RoZXRpY2FsbHkgcGxlYXNpbmcgY29uc29sZSBsb2dnaW5nIFxuKi9cbmNvbnN0IGNoYWxrID0gcmVxdWlyZSgnY2hhbGsnKTtcbmNvbnN0IG1vbWVudCA9IHJlcXVpcmUoJ21vbWVudCcpO1xuXG5leHBvcnRzLmxvZyA9IChjb250ZW50LCB0eXBlID0gJ2xvZycpID0+IHtcbiAgICBjb25zdCB0aW1lc3RhbXAgPSBgWyR7bW9tZW50KCkuZm9ybWF0KCdZWVlZLU1NLUREIEhIOm1tOnNzJyl9XTpgO1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlICdsb2cnOiB7XG4gICAgICAgICAgICByZXR1cm4gY29uc29sZS5sb2coXG4gICAgICAgICAgICAgICAgYCR7dGltZXN0YW1wfSAke2NoYWxrLmJnQmx1ZSh0eXBlLnRvVXBwZXJDYXNlKCkpfSAke2NvbnRlbnR9IGBcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnd2Fybic6IHtcbiAgICAgICAgICAgIHJldHVybiBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgICAgICBgJHt0aW1lc3RhbXB9ICR7Y2hhbGsuYmxhY2suYmdZZWxsb3coXG4gICAgICAgICAgICAgICAgICAgIHR5cGUudG9VcHBlckNhc2UoKVxuICAgICAgICAgICAgICAgICl9ICR7Y29udGVudH0gYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdlcnJvcic6IHtcbiAgICAgICAgICAgIHJldHVybiBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgICAgICBgJHt0aW1lc3RhbXB9ICR7Y2hhbGsuYmdSZWQodHlwZS50b1VwcGVyQ2FzZSgpKX0gJHtjb250ZW50fSBgXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2RlYnVnJzoge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgICAgIGAke3RpbWVzdGFtcH0gJHtjaGFsay5ncmVlbih0eXBlLnRvVXBwZXJDYXNlKCkpfSAke2NvbnRlbnR9IGBcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnY21kJzoge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgICAgIGAke3RpbWVzdGFtcH0gJHtjaGFsay5ibGFjay5iZ1doaXRlKFxuICAgICAgICAgICAgICAgICAgICB0eXBlLnRvVXBwZXJDYXNlKClcbiAgICAgICAgICAgICAgICApfSAke2NvbnRlbnR9YFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdyZWFkeSc6IHtcbiAgICAgICAgICAgIHJldHVybiBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgICAgICBgJHt0aW1lc3RhbXB9ICR7Y2hhbGsuYmxhY2suYmdHcmVlbihcbiAgICAgICAgICAgICAgICAgICAgdHlwZS50b1VwcGVyQ2FzZSgpXG4gICAgICAgICAgICAgICAgKX0gJHtjb250ZW50fWBcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgICAgICAgJ0xvZ2dlciB0eXBlIG11c3QgYmUgZWl0aGVyIHdhcm4sIGRlYnVnLCBsb2csIHJlYWR5LCBjbWQgb3IgZXJyb3IuJ1xuICAgICAgICAgICAgKTtcbiAgICB9XG59O1xuXG5leHBvcnRzLmVycm9yID0gKC4uLmFyZ3MpID0+IHRoaXMubG9nKC4uLmFyZ3MsICdlcnJvcicpO1xuXG5leHBvcnRzLndhcm4gPSAoLi4uYXJncykgPT4gdGhpcy5sb2coLi4uYXJncywgJ3dhcm4nKTtcblxuZXhwb3J0cy5kZWJ1ZyA9ICguLi5hcmdzKSA9PiB0aGlzLmxvZyguLi5hcmdzLCAnZGVidWcnKTtcblxuZXhwb3J0cy5jbWQgPSAoLi4uYXJncykgPT4gdGhpcy5sb2coLi4uYXJncywgJ2NtZCcpO1xuIl19