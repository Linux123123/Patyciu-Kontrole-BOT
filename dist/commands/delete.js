const { MessageEmbed } = require('discord.js');
exports.run = (client, message, args, level) => {
    const user = message.mentions.users.first();
    // Parse Amount
    const amount = !!parseInt(message.content.split(' ')[1])
        ? parseInt(message.content.split(' ')[1])
        : parseInt(message.content.split(' ')[2]);
    if (!amount)
        return message.reply('Must specify an amount to delete!');
    if (!amount && !user)
        return message.reply('Must specify a user and amount, or just an amount, of messages to purge!');
    // Fetch 100 messages (will be filtered and lowered up to max amount requested)
    message.channel.bulkDelete(1); // Delete the command sent
    const embed = new MessageEmbed()
        .setTitle(`Successfully deleted ${amount} messages!`)
        .setColor(message.settings.embedColor)
        .setTimestamp();
    message.channel.messages
        .fetch({
        limit: 100,
    })
        .then((messages) => {
        if (user) {
            const filterBy = user ? user.id : Client.user.id;
            messages = messages
                .filter((m) => m.author.id === filterBy)
                .array()
                .slice(0, amount);
        }
        else {
            messages = messages.array().slice(0, amount + 1);
        }
        message.channel
            .bulkDelete(messages)
            .then(() => {
            message.channel
                .send(embed)
                .then((msg) => msg.delete({ timeout: 3000 }));
        })
            .catch((error) => console.log(error.stack));
    });
};
exports.conf = {
    enabled: true,
    guildOnly: true,
    aliases: ['purge', 'clear', 'remove'],
    permLevel: 'Moderator',
};
exports.help = {
    name: 'delete',
    category: 'Chat',
    description: 'Delete user / channel messages',
    usage: 'delete 50 or delete @user 50',
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVsZXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbW1hbmRzL2RlbGV0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLEVBQUUsWUFBWSxFQUFFLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBRS9DLE9BQU8sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRTtJQUMzQyxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUM1QyxlQUFlO0lBQ2YsTUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwRCxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5QyxJQUFJLENBQUMsTUFBTTtRQUFFLE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO0lBQ3ZFLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJO1FBQ2hCLE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FDaEIsMEVBQTBFLENBQzdFLENBQUM7SUFDTiwrRUFBK0U7SUFFL0UsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQywwQkFBMEI7SUFFekQsTUFBTSxLQUFLLEdBQUcsSUFBSSxZQUFZLEVBQUU7U0FDM0IsUUFBUSxDQUFDLHdCQUF3QixNQUFNLFlBQVksQ0FBQztTQUNwRCxRQUFRLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUM7U0FDckMsWUFBWSxFQUFFLENBQUM7SUFFcEIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxRQUFRO1NBQ25CLEtBQUssQ0FBQztRQUNILEtBQUssRUFBRSxHQUFHO0tBQ2IsQ0FBQztTQUNELElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFO1FBQ2YsSUFBSSxJQUFJLEVBQUU7WUFDTixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1lBQ2pELFFBQVEsR0FBRyxRQUFRO2lCQUNkLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEtBQUssUUFBUSxDQUFDO2lCQUN2QyxLQUFLLEVBQUU7aUJBQ1AsS0FBSyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNO1lBQ0gsUUFBUSxHQUFHLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztTQUNwRDtRQUNELE9BQU8sQ0FBQyxPQUFPO2FBQ1YsVUFBVSxDQUFDLFFBQVEsQ0FBQzthQUNwQixJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ1AsT0FBTyxDQUFDLE9BQU87aUJBQ1YsSUFBSSxDQUFDLEtBQUssQ0FBQztpQkFDWCxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3RELENBQUMsQ0FBQzthQUNELEtBQUssQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNwRCxDQUFDLENBQUMsQ0FBQztBQUNYLENBQUMsQ0FBQztBQUVGLE9BQU8sQ0FBQyxJQUFJLEdBQUc7SUFDWCxPQUFPLEVBQUUsSUFBSTtJQUNiLFNBQVMsRUFBRSxJQUFJO0lBQ2YsT0FBTyxFQUFFLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxRQUFRLENBQUM7SUFDckMsU0FBUyxFQUFFLFdBQVc7Q0FDekIsQ0FBQztBQUVGLE9BQU8sQ0FBQyxJQUFJLEdBQUc7SUFDWCxJQUFJLEVBQUUsUUFBUTtJQUNkLFFBQVEsRUFBRSxNQUFNO0lBQ2hCLFdBQVcsRUFBRSxnQ0FBZ0M7SUFDN0MsS0FBSyxFQUFFLDhCQUE4QjtDQUN4QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBNZXNzYWdlRW1iZWQgfSA9IHJlcXVpcmUoJ2Rpc2NvcmQuanMnKTtcblxuZXhwb3J0cy5ydW4gPSAoY2xpZW50LCBtZXNzYWdlLCBhcmdzLCBsZXZlbCkgPT4ge1xuICAgIGNvbnN0IHVzZXIgPSBtZXNzYWdlLm1lbnRpb25zLnVzZXJzLmZpcnN0KCk7XG4gICAgLy8gUGFyc2UgQW1vdW50XG4gICAgY29uc3QgYW1vdW50ID0gISFwYXJzZUludChtZXNzYWdlLmNvbnRlbnQuc3BsaXQoJyAnKVsxXSlcbiAgICAgICAgPyBwYXJzZUludChtZXNzYWdlLmNvbnRlbnQuc3BsaXQoJyAnKVsxXSlcbiAgICAgICAgOiBwYXJzZUludChtZXNzYWdlLmNvbnRlbnQuc3BsaXQoJyAnKVsyXSk7XG4gICAgaWYgKCFhbW91bnQpIHJldHVybiBtZXNzYWdlLnJlcGx5KCdNdXN0IHNwZWNpZnkgYW4gYW1vdW50IHRvIGRlbGV0ZSEnKTtcbiAgICBpZiAoIWFtb3VudCAmJiAhdXNlcilcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2UucmVwbHkoXG4gICAgICAgICAgICAnTXVzdCBzcGVjaWZ5IGEgdXNlciBhbmQgYW1vdW50LCBvciBqdXN0IGFuIGFtb3VudCwgb2YgbWVzc2FnZXMgdG8gcHVyZ2UhJ1xuICAgICAgICApO1xuICAgIC8vIEZldGNoIDEwMCBtZXNzYWdlcyAod2lsbCBiZSBmaWx0ZXJlZCBhbmQgbG93ZXJlZCB1cCB0byBtYXggYW1vdW50IHJlcXVlc3RlZClcblxuICAgIG1lc3NhZ2UuY2hhbm5lbC5idWxrRGVsZXRlKDEpOyAvLyBEZWxldGUgdGhlIGNvbW1hbmQgc2VudFxuXG4gICAgY29uc3QgZW1iZWQgPSBuZXcgTWVzc2FnZUVtYmVkKClcbiAgICAgICAgLnNldFRpdGxlKGBTdWNjZXNzZnVsbHkgZGVsZXRlZCAke2Ftb3VudH0gbWVzc2FnZXMhYClcbiAgICAgICAgLnNldENvbG9yKG1lc3NhZ2Uuc2V0dGluZ3MuZW1iZWRDb2xvcilcbiAgICAgICAgLnNldFRpbWVzdGFtcCgpO1xuXG4gICAgbWVzc2FnZS5jaGFubmVsLm1lc3NhZ2VzXG4gICAgICAgIC5mZXRjaCh7XG4gICAgICAgICAgICBsaW1pdDogMTAwLFxuICAgICAgICB9KVxuICAgICAgICAudGhlbigobWVzc2FnZXMpID0+IHtcbiAgICAgICAgICAgIGlmICh1c2VyKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmlsdGVyQnkgPSB1c2VyID8gdXNlci5pZCA6IENsaWVudC51c2VyLmlkO1xuICAgICAgICAgICAgICAgIG1lc3NhZ2VzID0gbWVzc2FnZXNcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcigobSkgPT4gbS5hdXRob3IuaWQgPT09IGZpbHRlckJ5KVxuICAgICAgICAgICAgICAgICAgICAuYXJyYXkoKVxuICAgICAgICAgICAgICAgICAgICAuc2xpY2UoMCwgYW1vdW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZXMgPSBtZXNzYWdlcy5hcnJheSgpLnNsaWNlKDAsIGFtb3VudCArIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWVzc2FnZS5jaGFubmVsXG4gICAgICAgICAgICAgICAgLmJ1bGtEZWxldGUobWVzc2FnZXMpXG4gICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmNoYW5uZWxcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZW5kKGVtYmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKG1zZykgPT4gbXNnLmRlbGV0ZSh7IHRpbWVvdXQ6IDMwMDAgfSkpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4gY29uc29sZS5sb2coZXJyb3Iuc3RhY2spKTtcbiAgICAgICAgfSk7XG59O1xuXG5leHBvcnRzLmNvbmYgPSB7XG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICBndWlsZE9ubHk6IHRydWUsXG4gICAgYWxpYXNlczogWydwdXJnZScsICdjbGVhcicsICdyZW1vdmUnXSxcbiAgICBwZXJtTGV2ZWw6ICdNb2RlcmF0b3InLFxufTtcblxuZXhwb3J0cy5oZWxwID0ge1xuICAgIG5hbWU6ICdkZWxldGUnLFxuICAgIGNhdGVnb3J5OiAnQ2hhdCcsXG4gICAgZGVzY3JpcHRpb246ICdEZWxldGUgdXNlciAvIGNoYW5uZWwgbWVzc2FnZXMnLFxuICAgIHVzYWdlOiAnZGVsZXRlIDUwIG9yIGRlbGV0ZSBAdXNlciA1MCcsXG59O1xuIl19