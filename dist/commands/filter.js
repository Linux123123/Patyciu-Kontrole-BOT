exports.run = async (client, message, args, level) => {
    if (client.musicUserCheck(client, message, true))
        return;
    message.channel.bulkDelete(1);
    if (!args[0])
        return message.channel
            .send(`Please specify a valid filter to enable or disable !`)
            .then((msg) => msg.delete({ timeout: 3000 }));
    const filterToUpdate = client.config.filters.find((x) => x.toLowerCase() === args[0].toLowerCase());
    if (!filterToUpdate)
        return message.channel
            .send(`This filter doesn't exist ! (8D, vibrato, bassboost) !`)
            .then((msg) => msg.delete({ timeout: 3000 }));
    const filtersUpdated = {};
    filtersUpdated[filterToUpdate] = client.player.getQueue(message).filters[filterToUpdate]
        ? false
        : true;
    client.player.setFilters(message, filtersUpdated);
    if (filtersUpdated[filterToUpdate])
        message.channel
            .send(`I'm **adding** the filter to the music, please wait...`)
            .then((msg) => msg.delete({ timeout: 3000 }));
    else
        message.channel
            .send(`I'm **disabling** the filter on the music, please wait...`)
            .then((msg) => msg.delete({ timeout: 3000 }));
};
exports.conf = {
    enabled: true,
    guildOnly: true,
    aliases: [],
    permLevel: 'Moderator',
};
exports.help = {
    name: 'filter',
    category: 'Music',
    description: 'Add filters',
    usage: 'filter',
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbW1hbmRzL2ZpbHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLENBQUMsR0FBRyxHQUFHLEtBQUssRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRTtJQUNqRCxJQUFJLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUM7UUFBRSxPQUFPO0lBQ3pELE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ1IsT0FBTyxPQUFPLENBQUMsT0FBTzthQUNqQixJQUFJLENBQUMsc0RBQXNELENBQUM7YUFDNUQsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN0RCxNQUFNLGNBQWMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQzdDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUNuRCxDQUFDO0lBQ0YsSUFBSSxDQUFDLGNBQWM7UUFDZixPQUFPLE9BQU8sQ0FBQyxPQUFPO2FBQ2pCLElBQUksQ0FBQyx3REFBd0QsQ0FBQzthQUM5RCxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3RELE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQztJQUMxQixjQUFjLENBQUMsY0FBYyxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUNwRSxjQUFjLENBQ2pCO1FBQ0csQ0FBQyxDQUFDLEtBQUs7UUFDUCxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ1gsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQ2xELElBQUksY0FBYyxDQUFDLGNBQWMsQ0FBQztRQUM5QixPQUFPLENBQUMsT0FBTzthQUNWLElBQUksQ0FBQyx3REFBd0QsQ0FBQzthQUM5RCxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDOztRQUVsRCxPQUFPLENBQUMsT0FBTzthQUNWLElBQUksQ0FBQywyREFBMkQsQ0FBQzthQUNqRSxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzFELENBQUMsQ0FBQztBQUVGLE9BQU8sQ0FBQyxJQUFJLEdBQUc7SUFDWCxPQUFPLEVBQUUsSUFBSTtJQUNiLFNBQVMsRUFBRSxJQUFJO0lBQ2YsT0FBTyxFQUFFLEVBQUU7SUFDWCxTQUFTLEVBQUUsV0FBVztDQUN6QixDQUFDO0FBRUYsT0FBTyxDQUFDLElBQUksR0FBRztJQUNYLElBQUksRUFBRSxRQUFRO0lBQ2QsUUFBUSxFQUFFLE9BQU87SUFDakIsV0FBVyxFQUFFLGFBQWE7SUFDMUIsS0FBSyxFQUFFLFFBQVE7Q0FDbEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMucnVuID0gYXN5bmMgKGNsaWVudCwgbWVzc2FnZSwgYXJncywgbGV2ZWwpID0+IHtcbiAgICBpZiAoY2xpZW50Lm11c2ljVXNlckNoZWNrKGNsaWVudCwgbWVzc2FnZSwgdHJ1ZSkpIHJldHVybjtcbiAgICBtZXNzYWdlLmNoYW5uZWwuYnVsa0RlbGV0ZSgxKTtcbiAgICBpZiAoIWFyZ3NbMF0pXG4gICAgICAgIHJldHVybiBtZXNzYWdlLmNoYW5uZWxcbiAgICAgICAgICAgIC5zZW5kKGBQbGVhc2Ugc3BlY2lmeSBhIHZhbGlkIGZpbHRlciB0byBlbmFibGUgb3IgZGlzYWJsZSAhYClcbiAgICAgICAgICAgIC50aGVuKChtc2cpID0+IG1zZy5kZWxldGUoeyB0aW1lb3V0OiAzMDAwIH0pKTtcbiAgICBjb25zdCBmaWx0ZXJUb1VwZGF0ZSA9IGNsaWVudC5jb25maWcuZmlsdGVycy5maW5kKFxuICAgICAgICAoeCkgPT4geC50b0xvd2VyQ2FzZSgpID09PSBhcmdzWzBdLnRvTG93ZXJDYXNlKClcbiAgICApO1xuICAgIGlmICghZmlsdGVyVG9VcGRhdGUpXG4gICAgICAgIHJldHVybiBtZXNzYWdlLmNoYW5uZWxcbiAgICAgICAgICAgIC5zZW5kKGBUaGlzIGZpbHRlciBkb2Vzbid0IGV4aXN0ICEgKDhELCB2aWJyYXRvLCBiYXNzYm9vc3QpICFgKVxuICAgICAgICAgICAgLnRoZW4oKG1zZykgPT4gbXNnLmRlbGV0ZSh7IHRpbWVvdXQ6IDMwMDAgfSkpO1xuICAgIGNvbnN0IGZpbHRlcnNVcGRhdGVkID0ge307XG4gICAgZmlsdGVyc1VwZGF0ZWRbZmlsdGVyVG9VcGRhdGVdID0gY2xpZW50LnBsYXllci5nZXRRdWV1ZShtZXNzYWdlKS5maWx0ZXJzW1xuICAgICAgICBmaWx0ZXJUb1VwZGF0ZVxuICAgIF1cbiAgICAgICAgPyBmYWxzZVxuICAgICAgICA6IHRydWU7XG4gICAgY2xpZW50LnBsYXllci5zZXRGaWx0ZXJzKG1lc3NhZ2UsIGZpbHRlcnNVcGRhdGVkKTtcbiAgICBpZiAoZmlsdGVyc1VwZGF0ZWRbZmlsdGVyVG9VcGRhdGVdKVxuICAgICAgICBtZXNzYWdlLmNoYW5uZWxcbiAgICAgICAgICAgIC5zZW5kKGBJJ20gKiphZGRpbmcqKiB0aGUgZmlsdGVyIHRvIHRoZSBtdXNpYywgcGxlYXNlIHdhaXQuLi5gKVxuICAgICAgICAgICAgLnRoZW4oKG1zZykgPT4gbXNnLmRlbGV0ZSh7IHRpbWVvdXQ6IDMwMDAgfSkpO1xuICAgIGVsc2VcbiAgICAgICAgbWVzc2FnZS5jaGFubmVsXG4gICAgICAgICAgICAuc2VuZChgSSdtICoqZGlzYWJsaW5nKiogdGhlIGZpbHRlciBvbiB0aGUgbXVzaWMsIHBsZWFzZSB3YWl0Li4uYClcbiAgICAgICAgICAgIC50aGVuKChtc2cpID0+IG1zZy5kZWxldGUoeyB0aW1lb3V0OiAzMDAwIH0pKTtcbn07XG5cbmV4cG9ydHMuY29uZiA9IHtcbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIGd1aWxkT25seTogdHJ1ZSxcbiAgICBhbGlhc2VzOiBbXSxcbiAgICBwZXJtTGV2ZWw6ICdNb2RlcmF0b3InLFxufTtcblxuZXhwb3J0cy5oZWxwID0ge1xuICAgIG5hbWU6ICdmaWx0ZXInLFxuICAgIGNhdGVnb3J5OiAnTXVzaWMnLFxuICAgIGRlc2NyaXB0aW9uOiAnQWRkIGZpbHRlcnMnLFxuICAgIHVzYWdlOiAnZmlsdGVyJyxcbn07XG4iXX0=