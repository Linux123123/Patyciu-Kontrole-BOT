const { MessageEmbed } = require('discord.js');
exports.run = async (client, message, args, level) => {
    if (args < 1) {
        return message.reply('Must provide a name! (of channel to create)');
    }
    if (!message.guild.me.hasPermission('MANAGE_CHANNELS'))
        return message.reply(`I don't have permissions to create a channel!`);
    const embed = new MessageEmbed()
        .setTitle('No song playing currently')
        .setImage('https://bestbots.today/wp-content/uploads/2020/04/Music.png')
        .setFooter(`Prefix for this server is: ${message.settings.prefix}`)
        .setColor(message.settings.embedColor);
    message.guild.channels
        .create(args[0], {
        reason: 'Music bot channel!',
        topic: 'Music bot channel! Type a song and it will be played!',
    })
        .then((channel) => {
        client.settings.set(message.guild.id, channel.id, 'musicChannelId');
        channel
            .send('Queue:\n', embed)
            .then((msg) => client.settings.set(message.guild.id, msg.id, 'musicMsgId'));
    });
};
exports.conf = {
    enabled: true,
    guildOnly: true,
    aliases: [],
    permLevel: 'Administrator',
};
exports.help = {
    name: 'setup-music',
    category: 'Music',
    description: 'Sets up music channel',
    usage: 'setup-music <name of channel to create>',
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dXAtbXVzaWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29tbWFuZHMvc2V0dXAtbXVzaWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxFQUFFLFlBQVksRUFBRSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUUvQyxPQUFPLENBQUMsR0FBRyxHQUFHLEtBQUssRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRTtJQUNqRCxJQUFJLElBQUksR0FBRyxDQUFDLEVBQUU7UUFDVixPQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUMsNkNBQTZDLENBQUMsQ0FBQztLQUN2RTtJQUNELElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUM7UUFDbEQsT0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDLCtDQUErQyxDQUFDLENBQUM7SUFDMUUsTUFBTSxLQUFLLEdBQUcsSUFBSSxZQUFZLEVBQUU7U0FDM0IsUUFBUSxDQUFDLDJCQUEyQixDQUFDO1NBQ3JDLFFBQVEsQ0FBQyw2REFBNkQsQ0FBQztTQUN2RSxTQUFTLENBQUMsOEJBQThCLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDbEUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDM0MsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRO1NBQ2pCLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDYixNQUFNLEVBQUUsb0JBQW9CO1FBQzVCLEtBQUssRUFBRSx1REFBdUQ7S0FDakUsQ0FBQztTQUNELElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1FBQ2QsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLEVBQUUsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3BFLE9BQU87YUFDRixJQUFJLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQzthQUN2QixJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUNWLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsWUFBWSxDQUFDLENBQzlELENBQUM7SUFDVixDQUFDLENBQUMsQ0FBQztBQUNYLENBQUMsQ0FBQztBQUVGLE9BQU8sQ0FBQyxJQUFJLEdBQUc7SUFDWCxPQUFPLEVBQUUsSUFBSTtJQUNiLFNBQVMsRUFBRSxJQUFJO0lBQ2YsT0FBTyxFQUFFLEVBQUU7SUFDWCxTQUFTLEVBQUUsZUFBZTtDQUM3QixDQUFDO0FBRUYsT0FBTyxDQUFDLElBQUksR0FBRztJQUNYLElBQUksRUFBRSxhQUFhO0lBQ25CLFFBQVEsRUFBRSxPQUFPO0lBQ2pCLFdBQVcsRUFBRSx1QkFBdUI7SUFDcEMsS0FBSyxFQUFFLHlDQUF5QztDQUNuRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBNZXNzYWdlRW1iZWQgfSA9IHJlcXVpcmUoJ2Rpc2NvcmQuanMnKTtcblxuZXhwb3J0cy5ydW4gPSBhc3luYyAoY2xpZW50LCBtZXNzYWdlLCBhcmdzLCBsZXZlbCkgPT4ge1xuICAgIGlmIChhcmdzIDwgMSkge1xuICAgICAgICByZXR1cm4gbWVzc2FnZS5yZXBseSgnTXVzdCBwcm92aWRlIGEgbmFtZSEgKG9mIGNoYW5uZWwgdG8gY3JlYXRlKScpO1xuICAgIH1cbiAgICBpZiAoIW1lc3NhZ2UuZ3VpbGQubWUuaGFzUGVybWlzc2lvbignTUFOQUdFX0NIQU5ORUxTJykpXG4gICAgICAgIHJldHVybiBtZXNzYWdlLnJlcGx5KGBJIGRvbid0IGhhdmUgcGVybWlzc2lvbnMgdG8gY3JlYXRlIGEgY2hhbm5lbCFgKTtcbiAgICBjb25zdCBlbWJlZCA9IG5ldyBNZXNzYWdlRW1iZWQoKVxuICAgICAgICAuc2V0VGl0bGUoJ05vIHNvbmcgcGxheWluZyBjdXJyZW50bHknKVxuICAgICAgICAuc2V0SW1hZ2UoJ2h0dHBzOi8vYmVzdGJvdHMudG9kYXkvd3AtY29udGVudC91cGxvYWRzLzIwMjAvMDQvTXVzaWMucG5nJylcbiAgICAgICAgLnNldEZvb3RlcihgUHJlZml4IGZvciB0aGlzIHNlcnZlciBpczogJHttZXNzYWdlLnNldHRpbmdzLnByZWZpeH1gKVxuICAgICAgICAuc2V0Q29sb3IobWVzc2FnZS5zZXR0aW5ncy5lbWJlZENvbG9yKTtcbiAgICBtZXNzYWdlLmd1aWxkLmNoYW5uZWxzXG4gICAgICAgIC5jcmVhdGUoYXJnc1swXSwge1xuICAgICAgICAgICAgcmVhc29uOiAnTXVzaWMgYm90IGNoYW5uZWwhJyxcbiAgICAgICAgICAgIHRvcGljOiAnTXVzaWMgYm90IGNoYW5uZWwhIFR5cGUgYSBzb25nIGFuZCBpdCB3aWxsIGJlIHBsYXllZCEnLFxuICAgICAgICB9KVxuICAgICAgICAudGhlbigoY2hhbm5lbCkgPT4ge1xuICAgICAgICAgICAgY2xpZW50LnNldHRpbmdzLnNldChtZXNzYWdlLmd1aWxkLmlkLCBjaGFubmVsLmlkLCAnbXVzaWNDaGFubmVsSWQnKTtcbiAgICAgICAgICAgIGNoYW5uZWxcbiAgICAgICAgICAgICAgICAuc2VuZCgnUXVldWU6XFxuJywgZW1iZWQpXG4gICAgICAgICAgICAgICAgLnRoZW4oKG1zZykgPT5cbiAgICAgICAgICAgICAgICAgICAgY2xpZW50LnNldHRpbmdzLnNldChtZXNzYWdlLmd1aWxkLmlkLCBtc2cuaWQsICdtdXNpY01zZ0lkJylcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICB9KTtcbn07XG5cbmV4cG9ydHMuY29uZiA9IHtcbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIGd1aWxkT25seTogdHJ1ZSxcbiAgICBhbGlhc2VzOiBbXSxcbiAgICBwZXJtTGV2ZWw6ICdBZG1pbmlzdHJhdG9yJyxcbn07XG5cbmV4cG9ydHMuaGVscCA9IHtcbiAgICBuYW1lOiAnc2V0dXAtbXVzaWMnLFxuICAgIGNhdGVnb3J5OiAnTXVzaWMnLFxuICAgIGRlc2NyaXB0aW9uOiAnU2V0cyB1cCBtdXNpYyBjaGFubmVsJyxcbiAgICB1c2FnZTogJ3NldHVwLW11c2ljIDxuYW1lIG9mIGNoYW5uZWwgdG8gY3JlYXRlPicsXG59O1xuIl19