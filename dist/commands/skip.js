exports.run = async (client, message, args, level) => {
    if (client.musicUserCheck(client, message, true))
        return;
    let queue = client.player.getQueue(message);
    let channel = await client.channels.fetch(message.settings.musicChannelId);
    let msg = await channel.messages.fetch(message.settings.musicMsgId);
    msg.edit(client.queueMessage(queue));
    client.player.skip(message);
    message.channel.bulkDelete(1).then(() => {
        message.channel
            .send(`Current song **Skipped** !`)
            .then((msg) => msg.delete({ timeout: 3000 }));
    });
};
exports.conf = {
    enabled: true,
    guildOnly: true,
    aliases: ['sk'],
    permLevel: 'Moderator',
};
exports.help = {
    name: 'skip',
    category: 'Music',
    description: 'Skips a song',
    usage: 'skip',
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tpcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYW5kcy9za2lwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sQ0FBQyxHQUFHLEdBQUcsS0FBSyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFO0lBQ2pELElBQUksTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQztRQUFFLE9BQU87SUFDekQsSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDNUMsSUFBSSxPQUFPLEdBQUcsTUFBTSxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzNFLElBQUksR0FBRyxHQUFHLE1BQU0sT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNwRSxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUVyQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM1QixPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO1FBQ3BDLE9BQU8sQ0FBQyxPQUFPO2FBQ1YsSUFBSSxDQUFDLDRCQUE0QixDQUFDO2FBQ2xDLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdEQsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUM7QUFFRixPQUFPLENBQUMsSUFBSSxHQUFHO0lBQ1gsT0FBTyxFQUFFLElBQUk7SUFDYixTQUFTLEVBQUUsSUFBSTtJQUNmLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQztJQUNmLFNBQVMsRUFBRSxXQUFXO0NBQ3pCLENBQUM7QUFFRixPQUFPLENBQUMsSUFBSSxHQUFHO0lBQ1gsSUFBSSxFQUFFLE1BQU07SUFDWixRQUFRLEVBQUUsT0FBTztJQUNqQixXQUFXLEVBQUUsY0FBYztJQUMzQixLQUFLLEVBQUUsTUFBTTtDQUNoQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cy5ydW4gPSBhc3luYyAoY2xpZW50LCBtZXNzYWdlLCBhcmdzLCBsZXZlbCkgPT4ge1xuICAgIGlmIChjbGllbnQubXVzaWNVc2VyQ2hlY2soY2xpZW50LCBtZXNzYWdlLCB0cnVlKSkgcmV0dXJuO1xuICAgIGxldCBxdWV1ZSA9IGNsaWVudC5wbGF5ZXIuZ2V0UXVldWUobWVzc2FnZSk7XG4gICAgbGV0IGNoYW5uZWwgPSBhd2FpdCBjbGllbnQuY2hhbm5lbHMuZmV0Y2gobWVzc2FnZS5zZXR0aW5ncy5tdXNpY0NoYW5uZWxJZCk7XG4gICAgbGV0IG1zZyA9IGF3YWl0IGNoYW5uZWwubWVzc2FnZXMuZmV0Y2gobWVzc2FnZS5zZXR0aW5ncy5tdXNpY01zZ0lkKTtcbiAgICBtc2cuZWRpdChjbGllbnQucXVldWVNZXNzYWdlKHF1ZXVlKSk7XG5cbiAgICBjbGllbnQucGxheWVyLnNraXAobWVzc2FnZSk7XG4gICAgbWVzc2FnZS5jaGFubmVsLmJ1bGtEZWxldGUoMSkudGhlbigoKSA9PiB7XG4gICAgICAgIG1lc3NhZ2UuY2hhbm5lbFxuICAgICAgICAgICAgLnNlbmQoYEN1cnJlbnQgc29uZyAqKlNraXBwZWQqKiAhYClcbiAgICAgICAgICAgIC50aGVuKChtc2cpID0+IG1zZy5kZWxldGUoeyB0aW1lb3V0OiAzMDAwIH0pKTtcbiAgICB9KTtcbn07XG5cbmV4cG9ydHMuY29uZiA9IHtcbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIGd1aWxkT25seTogdHJ1ZSxcbiAgICBhbGlhc2VzOiBbJ3NrJ10sXG4gICAgcGVybUxldmVsOiAnTW9kZXJhdG9yJyxcbn07XG5cbmV4cG9ydHMuaGVscCA9IHtcbiAgICBuYW1lOiAnc2tpcCcsXG4gICAgY2F0ZWdvcnk6ICdNdXNpYycsXG4gICAgZGVzY3JpcHRpb246ICdTa2lwcyBhIHNvbmcnLFxuICAgIHVzYWdlOiAnc2tpcCcsXG59O1xuIl19