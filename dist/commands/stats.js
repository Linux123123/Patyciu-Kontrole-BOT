const { version } = require('discord.js');
const moment = require('moment');
require('moment-duration-format');
exports.run = (client, message, args, level) => {
    // eslint-disable-line no-unused-vars
    const duration = moment
        .duration(client.uptime)
        .format(' D [days], H [hrs], m [mins], s [secs]');
    message.channel.send(`= STATISTICS =
• Mem Usage  :: ${(process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2)} MB
• Uptime     :: ${duration}
• Users      :: ${client.users.cache.size.toLocaleString()}
• Servers    :: ${client.guilds.cache.size.toLocaleString()}
• Channels   :: ${client.channels.cache.size.toLocaleString()}
• Discord.js :: v${version}
• Node       :: ${process.version}`, { code: 'asciidoc' });
};
exports.conf = {
    enabled: true,
    guildOnly: false,
    aliases: [],
    permLevel: 'User',
};
exports.help = {
    name: 'stats',
    category: 'Miscelaneous',
    description: 'Gives some useful bot statistics',
    usage: 'stats',
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29tbWFuZHMvc3RhdHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUMxQyxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDakMsT0FBTyxDQUFDLHdCQUF3QixDQUFDLENBQUM7QUFFbEMsT0FBTyxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFO0lBQzNDLHFDQUFxQztJQUNyQyxNQUFNLFFBQVEsR0FBRyxNQUFNO1NBQ2xCLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1NBQ3ZCLE1BQU0sQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO0lBQ3RELE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUNoQjtrQkFDVSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxRQUFRLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7a0JBQ3pELFFBQVE7a0JBQ1IsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRTtrQkFDeEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRTtrQkFDekMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRTttQkFDMUMsT0FBTztrQkFDUixPQUFPLENBQUMsT0FBTyxFQUFFLEVBQzNCLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxDQUN2QixDQUFDO0FBQ04sQ0FBQyxDQUFDO0FBRUYsT0FBTyxDQUFDLElBQUksR0FBRztJQUNYLE9BQU8sRUFBRSxJQUFJO0lBQ2IsU0FBUyxFQUFFLEtBQUs7SUFDaEIsT0FBTyxFQUFFLEVBQUU7SUFDWCxTQUFTLEVBQUUsTUFBTTtDQUNwQixDQUFDO0FBRUYsT0FBTyxDQUFDLElBQUksR0FBRztJQUNYLElBQUksRUFBRSxPQUFPO0lBQ2IsUUFBUSxFQUFFLGNBQWM7SUFDeEIsV0FBVyxFQUFFLGtDQUFrQztJQUMvQyxLQUFLLEVBQUUsT0FBTztDQUNqQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyB2ZXJzaW9uIH0gPSByZXF1aXJlKCdkaXNjb3JkLmpzJyk7XG5jb25zdCBtb21lbnQgPSByZXF1aXJlKCdtb21lbnQnKTtcbnJlcXVpcmUoJ21vbWVudC1kdXJhdGlvbi1mb3JtYXQnKTtcblxuZXhwb3J0cy5ydW4gPSAoY2xpZW50LCBtZXNzYWdlLCBhcmdzLCBsZXZlbCkgPT4ge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBjb25zdCBkdXJhdGlvbiA9IG1vbWVudFxuICAgICAgICAuZHVyYXRpb24oY2xpZW50LnVwdGltZSlcbiAgICAgICAgLmZvcm1hdCgnIEQgW2RheXNdLCBIIFtocnNdLCBtIFttaW5zXSwgcyBbc2Vjc10nKTtcbiAgICBtZXNzYWdlLmNoYW5uZWwuc2VuZChcbiAgICAgICAgYD0gU1RBVElTVElDUyA9XG7igKIgTWVtIFVzYWdlICA6OiAkeyhwcm9jZXNzLm1lbW9yeVVzYWdlKCkuaGVhcFVzZWQgLyAxMDI0IC8gMTAyNCkudG9GaXhlZCgyKX0gTUJcbuKAoiBVcHRpbWUgICAgIDo6ICR7ZHVyYXRpb259XG7igKIgVXNlcnMgICAgICA6OiAke2NsaWVudC51c2Vycy5jYWNoZS5zaXplLnRvTG9jYWxlU3RyaW5nKCl9XG7igKIgU2VydmVycyAgICA6OiAke2NsaWVudC5ndWlsZHMuY2FjaGUuc2l6ZS50b0xvY2FsZVN0cmluZygpfVxu4oCiIENoYW5uZWxzICAgOjogJHtjbGllbnQuY2hhbm5lbHMuY2FjaGUuc2l6ZS50b0xvY2FsZVN0cmluZygpfVxu4oCiIERpc2NvcmQuanMgOjogdiR7dmVyc2lvbn1cbuKAoiBOb2RlICAgICAgIDo6ICR7cHJvY2Vzcy52ZXJzaW9ufWAsXG4gICAgICAgIHsgY29kZTogJ2FzY2lpZG9jJyB9XG4gICAgKTtcbn07XG5cbmV4cG9ydHMuY29uZiA9IHtcbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIGd1aWxkT25seTogZmFsc2UsXG4gICAgYWxpYXNlczogW10sXG4gICAgcGVybUxldmVsOiAnVXNlcicsXG59O1xuXG5leHBvcnRzLmhlbHAgPSB7XG4gICAgbmFtZTogJ3N0YXRzJyxcbiAgICBjYXRlZ29yeTogJ01pc2NlbGFuZW91cycsXG4gICAgZGVzY3JpcHRpb246ICdHaXZlcyBzb21lIHVzZWZ1bCBib3Qgc3RhdGlzdGljcycsXG4gICAgdXNhZ2U6ICdzdGF0cycsXG59O1xuIl19