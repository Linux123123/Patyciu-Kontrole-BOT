const { MessageEmbed } = require('discord.js');
module.exports = async (client, message, track, queue) => {
    try {
        let song;
        let lyricsChannel = await client.channels.fetch(message.settings.lyricsChannelId);
        let channel = await client.channels.fetch(message.settings.musicChannelId);
        let msg = await channel.messages.fetch(message.settings.musicMsgId);
        const embed = new MessageEmbed()
            .setTitle(track.title)
            .setURL(track.url)
            .addFields({
            name: 'Views:',
            value: track.views,
            inline: true,
        }, {
            name: 'Duration:',
            value: track.duration,
            inline: true,
        })
            .setImage(track.thumbnail)
            .setAuthor(track.author)
            .setFooter(`Requested by ${track.requestedBy.username}`)
            .setColor(message.settings.embedColor);
        msg.edit(client.queueMessage(queue), embed);
        if (track.title.toLowerCase().includes('official')) {
            let index = track.title.toLowerCase().search(/\bofficial\b/);
            song = track.title.slice(0, index - 1).trim();
        }
        else
            song = track.title;
        const lyricsEmbed = new MessageEmbed()
            .setTitle(track.title)
            .setDescription(await client.lyrics(song))
            .setColor(message.settings.embedColor)
            .setTimestamp()
            .setAuthor(track.author);
        lyricsChannel.send(await lyricsEmbed);
    }
    catch (error) {
        client.logger.error(error);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhY2tTdGFydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wbGF5ZXJFdmVudHMvdHJhY2tTdGFydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLEVBQUUsWUFBWSxFQUFFLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBRS9DLE1BQU0sQ0FBQyxPQUFPLEdBQUcsS0FBSyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFO0lBQ3JELElBQUk7UUFDQSxJQUFJLElBQUksQ0FBQztRQUNULElBQUksYUFBYSxHQUFHLE1BQU0sTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQzNDLE9BQU8sQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUNuQyxDQUFDO1FBQ0YsSUFBSSxPQUFPLEdBQUcsTUFBTSxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FDckMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQ2xDLENBQUM7UUFDRixJQUFJLEdBQUcsR0FBRyxNQUFNLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDcEUsTUFBTSxLQUFLLEdBQUcsSUFBSSxZQUFZLEVBQUU7YUFDM0IsUUFBUSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7YUFDckIsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7YUFDakIsU0FBUyxDQUNOO1lBQ0ksSUFBSSxFQUFFLFFBQVE7WUFDZCxLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUs7WUFDbEIsTUFBTSxFQUFFLElBQUk7U0FDZixFQUNEO1lBQ0ksSUFBSSxFQUFFLFdBQVc7WUFDakIsS0FBSyxFQUFFLEtBQUssQ0FBQyxRQUFRO1lBQ3JCLE1BQU0sRUFBRSxJQUFJO1NBQ2YsQ0FDSjthQUNBLFFBQVEsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDO2FBQ3pCLFNBQVMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO2FBQ3ZCLFNBQVMsQ0FBQyxnQkFBZ0IsS0FBSyxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQzthQUN2RCxRQUFRLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMzQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDNUMsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUNoRCxJQUFJLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUM3RCxJQUFJLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUNqRDs7WUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUMxQixNQUFNLFdBQVcsR0FBRyxJQUFJLFlBQVksRUFBRTthQUNqQyxRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQzthQUNyQixjQUFjLENBQUMsTUFBTSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ3pDLFFBQVEsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQzthQUNyQyxZQUFZLEVBQUU7YUFDZCxTQUFTLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRTdCLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxXQUFXLENBQUMsQ0FBQztLQUN6QztJQUFDLE9BQU8sS0FBSyxFQUFFO1FBQ1osTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDOUI7QUFDTCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IE1lc3NhZ2VFbWJlZCB9ID0gcmVxdWlyZSgnZGlzY29yZC5qcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFzeW5jIChjbGllbnQsIG1lc3NhZ2UsIHRyYWNrLCBxdWV1ZSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGxldCBzb25nO1xuICAgICAgICBsZXQgbHlyaWNzQ2hhbm5lbCA9IGF3YWl0IGNsaWVudC5jaGFubmVscy5mZXRjaChcbiAgICAgICAgICAgIG1lc3NhZ2Uuc2V0dGluZ3MubHlyaWNzQ2hhbm5lbElkXG4gICAgICAgICk7XG4gICAgICAgIGxldCBjaGFubmVsID0gYXdhaXQgY2xpZW50LmNoYW5uZWxzLmZldGNoKFxuICAgICAgICAgICAgbWVzc2FnZS5zZXR0aW5ncy5tdXNpY0NoYW5uZWxJZFxuICAgICAgICApO1xuICAgICAgICBsZXQgbXNnID0gYXdhaXQgY2hhbm5lbC5tZXNzYWdlcy5mZXRjaChtZXNzYWdlLnNldHRpbmdzLm11c2ljTXNnSWQpO1xuICAgICAgICBjb25zdCBlbWJlZCA9IG5ldyBNZXNzYWdlRW1iZWQoKVxuICAgICAgICAgICAgLnNldFRpdGxlKHRyYWNrLnRpdGxlKVxuICAgICAgICAgICAgLnNldFVSTCh0cmFjay51cmwpXG4gICAgICAgICAgICAuYWRkRmllbGRzKFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ1ZpZXdzOicsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0cmFjay52aWV3cyxcbiAgICAgICAgICAgICAgICAgICAgaW5saW5lOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnRHVyYXRpb246JyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRyYWNrLmR1cmF0aW9uLFxuICAgICAgICAgICAgICAgICAgICBpbmxpbmU6IHRydWUsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLnNldEltYWdlKHRyYWNrLnRodW1ibmFpbClcbiAgICAgICAgICAgIC5zZXRBdXRob3IodHJhY2suYXV0aG9yKVxuICAgICAgICAgICAgLnNldEZvb3RlcihgUmVxdWVzdGVkIGJ5ICR7dHJhY2sucmVxdWVzdGVkQnkudXNlcm5hbWV9YClcbiAgICAgICAgICAgIC5zZXRDb2xvcihtZXNzYWdlLnNldHRpbmdzLmVtYmVkQ29sb3IpO1xuICAgICAgICBtc2cuZWRpdChjbGllbnQucXVldWVNZXNzYWdlKHF1ZXVlKSwgZW1iZWQpO1xuICAgICAgICBpZiAodHJhY2sudGl0bGUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnb2ZmaWNpYWwnKSkge1xuICAgICAgICAgICAgbGV0IGluZGV4ID0gdHJhY2sudGl0bGUudG9Mb3dlckNhc2UoKS5zZWFyY2goL1xcYm9mZmljaWFsXFxiLyk7XG4gICAgICAgICAgICBzb25nID0gdHJhY2sudGl0bGUuc2xpY2UoMCwgaW5kZXggLSAxKS50cmltKCk7XG4gICAgICAgIH0gZWxzZSBzb25nID0gdHJhY2sudGl0bGU7XG4gICAgICAgIGNvbnN0IGx5cmljc0VtYmVkID0gbmV3IE1lc3NhZ2VFbWJlZCgpXG4gICAgICAgICAgICAuc2V0VGl0bGUodHJhY2sudGl0bGUpXG4gICAgICAgICAgICAuc2V0RGVzY3JpcHRpb24oYXdhaXQgY2xpZW50Lmx5cmljcyhzb25nKSlcbiAgICAgICAgICAgIC5zZXRDb2xvcihtZXNzYWdlLnNldHRpbmdzLmVtYmVkQ29sb3IpXG4gICAgICAgICAgICAuc2V0VGltZXN0YW1wKClcbiAgICAgICAgICAgIC5zZXRBdXRob3IodHJhY2suYXV0aG9yKTtcblxuICAgICAgICBseXJpY3NDaGFubmVsLnNlbmQoYXdhaXQgbHlyaWNzRW1iZWQpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNsaWVudC5sb2dnZXIuZXJyb3IoZXJyb3IpO1xuICAgIH1cbn07XG4iXX0=